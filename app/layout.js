"use client";

import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { UserDetailContext } from "@/context/UserDetailContext";
import { use, useContext, useEffect, useState } from "react";
import { ScreenSizeContext } from "@/context/ScreenSizeContext";
import { DragDropLayoutElement } from "@/context/DragDropLayoutElement";
import { WebTemplateContext } from "@/context/WebTemplateContext";
import { SelectedElementContext } from "@/context/SelectedElementContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

/*

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
*/

export default function RootLayout({ children }) {
const [userDetail, setUserDetail] = useState();
const [screenSize, setScreenSize] = useState("desktop");
const [dragElementLayout, setDragElementLayout] = useState();
const [webTemplate, setWebTemplate] = useState([]);
const [selectedElement, setSelectedElement] = useState();

  // Get user detail from local storage
useEffect(() => {
  const userDetail = localStorage.getItem("userDetail");
  const webTemplateStorage =JSON.parse(localStorage.getItem("webTemplate"))
  setWebTemplate(webTemplateStorage??[]);
  if (userDetail) {
    setUserDetail(JSON.parse(userDetail));
  }
}
, []);






useEffect(()=> {
if(typeof window!==undefined)
{
  localStorage.setItem('webTemplate', JSON.stringify(webTemplate))
}
}, [webTemplate])

useEffect(() => {
  if(selectedElement)
  {
    let updatedWebTemplates = [];
    webTemplate.forEach((item,index)=> {
    if(item.id===selectedElement?.layout?.id)
    {
      updatedWebTemplates?.push(selectedElement?.layout)

    }
    else{
      updatedWebTemplates.push(item)
    }
  })
  setWebTemplate(updatedWebTemplates);

}
}, [selectedElement])


  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`} suppressHydrationWarning >
        <UserDetailContext.Provider value={{ userDetail, setUserDetail }}>
          <ScreenSizeContext.Provider value={{screenSize, setScreenSize}}>
            <DragDropLayoutElement.Provider value={{dragElementLayout, setDragElementLayout}}>
           <WebTemplateContext.Provider value={{webTemplate, setWebTemplate}}>
            <SelectedElementContext.Provider value={{selectedElement, setSelectedElement}}>
        {children}
        </SelectedElementContext.Provider>
        </WebTemplateContext.Provider>
        </DragDropLayoutElement.Provider>
        </ScreenSizeContext.Provider>
        </UserDetailContext.Provider>
      </body>
    </html>
  );
}


export const useUserDetail = () => { 
  return useContext(UserDetailContext);
}

export const useScreenSize = () => {
  return useContext(ScreenSizeContext);
}

export const useDragDropLayoutElement = () => {
  return useContext(DragDropLayoutElement);
}

export const useWebTemplate = () => {
  return useContext(WebTemplateContext);
}

export const useSelectedElement = () => {
  return useContext(SelectedElementContext);
}